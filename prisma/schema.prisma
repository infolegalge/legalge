generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(SUBSCRIBER)
  companySlug    String?
  lawyerSlug     String?
  password       String?
  companyId      String?
  bioApproved    Boolean   @default(false)
  bioApprovedBy  String?
  bioApprovedAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  uploadedImages Image[]   @relation("UserUploadedImages")
  posts          Post[]
  requests       Request[]
  sessions       Session[]
  company        Company?  @relation(fields: [companyId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expires   DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id              String   @id @default(cuid())
  email           String
  phone           String
  message         String
  requestType     String
  companyId       String?
  status          String   @default("PENDING")
  userId          String?
  currentRole     String?
  requestedRole   String?
  targetCompanyId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id])
  company         Company? @relation(fields: [companyId], references: [id])
}

model PracticeArea {
  id               String                    @id @default(cuid())
  slug             String                    @unique
  title            String
  description      String?
  heroImageUrl     String?
  pageHeroImageUrl String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  translations     PracticeAreaTranslation[]
  services         Service[]
}

model Service {
  id             String               @id @default(cuid())
  slug           String               @unique
  title          String
  description    String?
  heroImageUrl   String?
  heroImageAlt   String?
  practiceAreaId String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  practiceArea   PracticeArea         @relation(fields: [practiceAreaId], references: [id], onDelete: Cascade)
  translations   ServiceTranslation[]
  specialists    SpecialistProfile[]  @relation("ServiceToSpecialistProfile")
}

model Company {
  id              String               @id @default(cuid())
  slug            String               @unique
  name            String
  description     String?
  shortDesc       String?
  longDesc        String?
  logoUrl         String?
  logoAlt         String?
  website         String?
  phone           String?
  email           String?
  address         String?
  city            String?
  mapLink         String?
  mission         String?
  vision          String?
  history         String?
  contactPrompt   String?
  socialLinks     String?
  metaTitle       String?
  metaDescription String?
  ogTitle         String?
  ogDescription   String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  categories      Category[]
  settings        CompanySettings?
  translations    CompanyTranslation[]
  posts           Post[]
  requests        Request[]
  specialists     SpecialistProfile[]
  users           User[]
}

model CompanyTranslation {
  id              String  @id @default(cuid())
  companyId       String
  locale          Locale
  name            String
  slug            String
  description     String?
  shortDesc       String?
  longDesc        String?
  logoAlt         String?
  mission         String?
  vision          String?
  history         String?
  contactPrompt   String?
  metaTitle       String?
  metaDescription String?
  ogTitle         String?
  ogDescription   String?
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, locale])
  @@unique([locale, slug])
}

model CompanySettings {
  id                     String   @id @default(cuid())
  companyId              String   @unique
  suspendSubmissions     Boolean  @default(false)
  autoApproveSpecialists Boolean  @default(false)
  notificationEmail      String?
  notifyOnRequest        Boolean  @default(true)
  notifyOnPost           Boolean  @default(true)
  notifyChannel          String   @default("EMAIL")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  company                Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model SpecialistProfile {
  id                    String                         @id @default(cuid())
  slug                  String                         @unique
  name                  String
  role                  String?
  bio                   String?
  avatarUrl             String?
  languages             String                         @default("[]")
  specializations       String                         @default("[]")
  contactEmail          String?
  contactPhone          String?
  city                  String?
  status                String                         @default("ACTIVE")
  philosophy            String?
  focusAreas            String?
  representativeMatters String?
  teachingWriting       String?
  credentials           String?
  values                String?
  companyId             String?
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt
  company               Company?                       @relation(fields: [companyId], references: [id])
  translations          SpecialistProfileTranslation[]
  services              Service[]                      @relation("ServiceToSpecialistProfile")
}

model Post {
  id              String            @id @default(cuid())
  title           String
  slug            String
  coverImage      String?
  coverImageAlt   String?
  excerpt         String?
  body            String
  metaTitle       String?
  metaDescription String?
  ogTitle         String?
  ogDescription   String?
  status          String            @default("DRAFT")
  publishedAt     DateTime?
  updatedAt       DateTime          @updatedAt
  authorType      String
  authorId        String
  companyId       String?
  readingTime     Int?
  viewCount       Int               @default(0)
  locale          Locale            @default(ka)
  createdAt       DateTime          @default(now())
  company         Company?          @relation(fields: [companyId], references: [id])
  author          User              @relation(fields: [authorId], references: [id])
  categories      PostCategory[]
  tags            PostTag[]
  translations    PostTranslation[]

  @@unique([slug, locale])
  @@index([status, publishedAt])
  @@index([authorType, authorId])
  @@index([companyId])
  @@index([locale])
}

model Category {
  id           String                @id @default(cuid())
  slug         String                @unique
  name         String
  type         String                @default("GLOBAL")
  companyId    String?
  isPublic     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  company      Company?              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  translations CategoryTranslation[]
  posts        PostCategory[]

  @@unique([slug, companyId])
}

model PostCategory {
  id         String   @id @default(cuid())
  postId     String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
}

model CategoryTranslation {
  id         String   @id @default(cuid())
  categoryId String
  locale     Locale
  name       String
  slug       String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@unique([locale, slug])
}

model PostTag {
  id        String   @id @default(cuid())
  postId    String
  tag       String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, tag])
}

model PostTranslation {
  id              String  @id @default(cuid())
  postId          String
  locale          Locale
  title           String
  slug            String
  excerpt         String?
  body            String?
  metaTitle       String?
  metaDescription String?
  ogTitle         String?
  ogDescription   String?
  post            Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, locale])
  @@unique([locale, slug])
}

model Media {
  id        String   @id @default(cuid())
  url       String
  alt       String   @default("")
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
}

model SliderSlide {
  id         String   @id @default(cuid())
  orderIndex Int      @default(0)
  lightUrl   String
  lightAlt   String?
  darkUrl    String
  darkAlt    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LegalPage {
  id           String                 @id @default(cuid())
  slug         String                 @unique
  title        String
  content      String
  lastUpdated  DateTime               @default(now())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  translations LegalPageTranslation[]
}

model PracticeAreaTranslation {
  id               String       @id @default(cuid())
  practiceAreaId   String
  locale           Locale
  title            String
  slug             String
  description      String?
  heroImageAlt     String?
  pageHeroImageAlt String?
  metaTitle        String?
  metaDescription  String?
  ogTitle          String?
  ogDescription    String?
  practiceArea     PracticeArea @relation(fields: [practiceAreaId], references: [id], onDelete: Cascade)

  @@unique([practiceAreaId, locale])
  @@unique([locale, slug])
}

model ServiceTranslation {
  id              String  @id @default(cuid())
  serviceId       String
  locale          Locale
  title           String
  slug            String
  description     String?
  heroImageAlt    String?
  metaTitle       String?
  metaDescription String?
  ogTitle         String?
  ogDescription   String?
  service         Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, locale])
  @@unique([locale, slug])
}

model SpecialistProfileTranslation {
  id                    String            @id @default(cuid())
  specialistProfileId   String
  locale                Locale
  name                  String
  slug                  String
  role                  String?
  bio                   String?
  metaTitle             String?
  metaDescription       String?
  ogTitle               String?
  ogDescription         String?
  philosophy            String?
  focusAreas            String?
  representativeMatters String?
  teachingWriting       String?
  credentials           String?
  values                String?
  specialistProfile     SpecialistProfile @relation(fields: [specialistProfileId], references: [id], onDelete: Cascade)

  @@unique([specialistProfileId, locale])
  @@unique([locale, slug])
}

model LegalPageTranslation {
  id              String    @id @default(cuid())
  legalPageId     String
  locale          Locale
  title           String
  slug            String
  content         String
  metaTitle       String?
  metaDescription String?
  ogTitle         String?
  ogDescription   String?
  legalPage       LegalPage @relation(fields: [legalPageId], references: [id], onDelete: Cascade)

  @@unique([legalPageId, locale])
  @@unique([locale, slug])
}

model AudioFile {
  id        String   @id @default(cuid())
  title     String
  fileName  String
  filePath  String   @unique
  fileSize  Int
  mimeType  String
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ImageTranslation {
  id      String @id @default(cuid())
  imageId String
  locale  Locale
  alt     String
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([imageId, locale])
}

model Image {
  id           String             @id @default(cuid())
  filename     String
  mimeType     String
  size         Int
  width        Int?
  height       Int?
  data         String
  webpData     String?
  alt          String?
  uploadedBy   String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  uploader     User?              @relation("UserUploadedImages", fields: [uploadedBy], references: [id])
  translations ImageTranslation[]
}

enum Locale {
  ka
  en
  ru
}

enum Role {
  SUPER_ADMIN
  COMPANY
  LAWYER
  SPECIALIST
  AUTHOR
  SUBSCRIBER
}
